/**
 This Source Code is licensed under the MIT license. If a copy of the
 MIT-license was not distributed with this file, You can obtain one at:
 http://opensource.org/licenses/mit-license.html.

 @author: Tom Clement (tjclement)
 @license MIT
 @copyright Bizboard, 2015

 */
import {Provide}                    from 'di';
import Firebase                     from 'firebase';
import {DataSource}                 from '../core/DataSource.js';
import {ObjectHelper}               from 'arva-utils/ObjectHelper.js';

@Provide(DataSource)
export class FirebaseDataSource extends DataSource {

    get dataReference() {
        return this._dataReference;
    }

    set dataReference(value) {
        this._dataReference = value;
    }

    /**
     * @param {String} path Full path to resource in remote data storage.
     * @return {FirebaseDataSource} FirebaseDataSource instance.
     **/
    constructor(path, options = { orderBy: '.priority'}) {
        super(path);
        this._onValueCallback = null;
        this._onAddCallback = null;
        this._onChangeCallback = null;
        this._onMoveCallback = null;
        this._onRemoveCallback = null;
        this._dataReference = new Firebase(path);
        this.options = options;

        /* Bind all local methods to the current object instance, so we can refer to "this"
         * in the methods as expected, even when they're called from event handlers.        */
        ObjectHelper.bindAllMethods(this, this);
    }

    /**
     * Returns the full path to this dataSource's source on the remote storage provider.
     * @returns {String} Full resource path.
     */
    toString() {
        return this._dataReference.toString();
    }


    /**
     * Returns a dataSource reference to the given child branch of the current datasource.
     * @param {String} childName Child branch name.
     * @param {Object} options Optional: additional options to pass to new DataSource instance.
     * @returns {DataSource} New dataSource instance pointing to the given child branch.
     */
    child(childName, options = {}) {
        return new FirebaseDataSource(this._dataReference.child(childName).toString(), options);
    }

    /**
     * Returns the full URL to the path on the dataSource. Functionally identical to toString().
     * @returns {String} Full resource path.
     */
    path() {
        return this._dataReference.toString();
    }

    /**
     * Returns the name of the current branch in the path on the dataSource.
     * @returns {String} Current branch name.
     */
    key() {
        return this._dataReference.key();
    }

    /**
     * Writes newData to the path this dataSource was constructed with.
     * @param {Object} newData Data to write to dataSource.
     * @returns {void}
     */
    set(newData) {
        return this._dataReference.set(newData);
    }

    /**
     * Removes the object and all underlying children that this dataSource points to.
     * @returns {void}
     */
    remove() {
        return this._dataReference.remove();
    }

    /**
     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
     * the dataSource.
     * @param {Object} newData New data to append to dataSource.
     * @returns {void}
     */
    push(newData) {
        return new FirebaseDataSource(this._dataReference.push(newData).toString());
    }

    /**
     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
     * @param {Object} newData New data to set.
     * @param {String|Number} priority Priority value by which the data should be ordered.
     * @returns {void}
     */
    setWithPriority(newData, priority) {
        return this._dataReference.setWithPriority(newData, priority);
    }

    /**
     * Sets the priority (ordering) of an object on a given dataSource.
     * @param {String|Number} newPriority New priority value to order data by.
     * @returns {void}
     */
    setPriority(newPriority) {
        return this._dataReference.setPriority(newPriority);
    }

    /**
     * Orders the DataSource's childs by the value in child[key].
     * @param {String} childKey Key of the field to order by.
     * @returns {DataSource} New dataSource instance.
     */
    orderByChild(childKey) {
        return new FirebaseDataSource(this._dataReference.orderByChild(childKey));
    }

    /**
     * Orders the DataSource's childs by their key names, ignoring their priority.
     * @returns {DataSource} New dataSource instance.
     */
    orderByKey() {
        return new FirebaseDataSource(this._dataReference.orderByKey());
    }

    /**
     * Orders the DataSource's childs by their values, ignoring their priority.
     * @returns {DataSource} New dataSource instance.
     */
    orderByValue() {
        return new FirebaseDataSource(this._dataReference.orderByValue());
    }

    /**
     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.
     * @param {Number} amount Amount of items to limit the dataSource to.
     * @returns {DataSource} New dataSource instance.
     */
    limitToFirst(amount) {
        return new FirebaseDataSource(this._dataReference.limitToFirst(amount));
    }

    /**
     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.
     * @param {Number} amount Amount of items to limit the dataSource to.
     * @returns {DataSource} New dataSource instance.
     */
    limitToLast(amount) {
        return new FirebaseDataSource(this._dataReference.limitToLast(amount));
    }

    /**
     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.
     * @param {String} provider google, facebook, github, or twitter
     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.
     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
     * On error, first argument is error message.
     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
     * @returns {void}
     */
    authWithOAuthToken(provider, credentials, onComplete, options) {
        return this._dataReference.authWithOAuthToken(provider, credentials, onComplete, options);
    }

    /**
     * Authenticates all instances of this DataSource with a custom auth token or secret.
     * @param {String} authToken Authentication token or secret.
     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
     * On error, first argument is error message.
     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
     * @returns {void}
     */
    authWithCustomToken(authToken, onComplete, options) {
        return this._dataReference.authWithCustomToken(authToken, onComplete, options);
    }

    /**
     * Authenticates all instances of this DataSource with the given email/password credentials.
     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
     * On error, first argument is error message.
     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
     * @returns {void}
     */
    authWithPassword(credentials, onComplete, options) {
        return this._dataReference.authWithPassword(credentials, onComplete, options);
    }

    /**
     * Authenticates all instances of this DataSource as an anonymous user.
     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
     * On error, first argument is error message.
     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
     * @returns {void}
     */
    authAnonymously(onComplete, options) {
        return this._dataReference.authAnonymously(onComplete, options);
    }

    /**
     * Fetches the current user's authentication state.
     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.
     * If the user is not authenticated, returns null.
     * @returns {Object|null} User auth object.
     */
    getAuth() {
        return this._dataReference.getAuth();
    }

    /**
     * Logs out from the datasource, allowing to re-authenticate at a later time.
     * @returns {void}
     */
    unauth() {
        return this._dataReference.unauth();
    }

    /**
     * Sets the callback triggered when dataSource updates the data.
     * @param {Function} callback Callback function to call when the subscribed data value changes.
     * @returns {void}
     **/
    setValueChangedCallback(callback) {
        this._onValueCallback = callback;

        if (this.options.orderBy && this.options.orderBy === '.priority') {
            this._dataReference.orderByPriority().on('value', this._onValueCallback.bind(this));
        } else if (this.options.orderBy && this.options.orderBy === '.value') {
            this._dataReference.orderByValue().on('value', this._onValueCallback.bind(this));
        } else if (this.options.orderBy && this.options.orderBy !== '') {
            this._dataReference.orderByChild(this.options.orderBy).on('value', this._onValueCallback.bind(this));
        } else {
            this._dataReference.on('value', this._onValueCallback.bind(this));
        }
    }

    /**
     * Removes the callback set to trigger when dataSource updates the data.
     * @returns {void}
     **/
    removeValueChangedCallback() {
        if(this._onValueCallback) {
            this._dataReference.off('value', this._onValueCallback);
            this._onValueCallback = null;
        }
    }

    /**
     * Set the callback triggered when dataSource adds a data element.
     * @param {Function} callback Callback function to call when a new data child is added.
     * @returns {void}
     **/
    setChildAddedCallback(callback) {
        this._onAddCallback = callback;
        let wrapper = (newChildSnapshot, prevChildName) => {
            this._onAddCallback(newChildSnapshot, prevChildName);
        };

        if (this.options.orderBy && this.options.orderBy === '.priority') {
            this._dataReference.orderByPriority().on('child_added', wrapper.bind(this));
        } else if (this.options.orderBy && this.options.orderBy === '.value') {
            this._dataReference.orderByValue().on('child_added', wrapper.bind(this));
        } else if (this.options.orderBy && this.options.orderBy !== '') {
            this._dataReference.orderByChild(this.options.orderBy).on('child_added', wrapper.bind(this));
        } else {
            this._dataReference.on('child_added', wrapper.bind(this));
        }
    }

    /**
     * Removes the callback set to trigger when dataSource adds a data element.
     * @returns {void}
     **/
    removeChildAddedCallback() {
        if(this._onAddCallback) {
            this._dataReference.off('child_added', this._onAddCallback);
            this._onAddCallback = null;
        }
    }

    /**
     * Set the callback triggered when dataSource changes a data element.
     * @param {Function} callback Callback function to call when a child is changed.
     * @returns {void}
     **/
    setChildChangedCallback(callback) {
        this._onChangeCallback = callback;
        let wrapper = (newChildSnapshot, prevChildName) => {
            this._onChangeCallback(newChildSnapshot, prevChildName);
        };

        if (this.options.orderBy && this.options.orderBy === '.priority') {
            this._dataReference.orderByPriority().on('child_changed', wrapper.bind(this));
        } else if (this.options.orderBy && this.options.orderBy === '.value') {
            this._dataReference.orderByValue().on('child_changed', wrapper.bind(this));
        } else if (this.options.orderBy && this.options.orderBy !== '') {
            this._dataReference.orderByChild(this.options.orderBy).on('child_changed', wrapper.bind(this));
        } else {
            this._dataReference.on('child_changed', wrapper.bind(this));
        }
    }

    /**
     * Removes the callback set to trigger when dataSource changes a data element.
     * @returns {void}
     **/
    removeChildChangedCallback() {
        if(this._onChangeCallback) {
            this._dataReference.off('child_changed', this._onChangeCallback);
            this._onChangeCallback = null;
        }
    }

    /**
     * Set the callback triggered when dataSource moves a data element.
     * @param {Function} callback Callback function to call when a child is moved.
     * @returns {void}
     **/
    setChildMovedCallback(callback) {
        this._onMoveCallback = callback;
        this._dataReference.on('child_moved', (newChildSnapshot, prevChildName) => {
            this._onMoveCallback(newChildSnapshot, prevChildName);
        });
    }

    /**
     * Removes the callback set to trigger when dataSource moves a data element.
     * @returns {void}
     **/
    removeChildMovedCallback() {
        if(this._onMoveCallback) {
            this._dataReference.off('child_moved', this._onMoveCallback);
            this._onMoveCallback = null;
        }
    }

    /**
     * Set the callback triggered when dataSource removes a data element.
     * @param {Function} callback Callback function to call when a child is removed.
     * @returns {void}
     **/
    setChildRemovedCallback(callback) {
        this._onRemoveCallback = callback;
        this._dataReference.on('child_removed', this._onRemoveCallback);
    }

    /**
     * Removes the callback set to trigger when dataSource removes a data element.
     * @returns {void}
     **/
    removeChildRemovedCallback() {
        if(this._onRemoveCallback) {
            this._dataReference.off('child_removed', this._onRemoveCallback);
            this._onRemoveCallback = null;
        }
    }
}