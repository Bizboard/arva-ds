/**
 This Source Code is licensed under the MIT license. If a copy of the
 MIT-license was not distributed with this file, You can obtain one at:
 http://opensource.org/licenses/mit-license.html.

 @author: Tom Clement (tjclement)
 @license MIT
 @copyright Bizboard, 2015

 */

import ObjectHelper                 from '../utils/objectHelper'
import {DataSource}                 from '../core/DataSource'
import Firebase                     from 'firebase'
import {Provide, annotate}          from 'di.js';

export class FirebaseDataSource extends DataSource {

    get dataReference() {
        return this._dataReference;
    }

    set dataReference(value) {
        this._dataReference = value
    }

    /** @param {String} path **/
    constructor(path) {
        super(path);
        this._onValueCallback = null;
        this._onAddCallback = null;
        this._onChangeCallback = null;
        this._onMoveCallback = null;
        this._onRemoveCallback = null;
        this._dataReference = new Firebase(path);

        /* Bind all local methods to the current object instance, so we can refer to "this"
         * in the methods as expected, even when they're called from event handlers.        */
        ObjectHelper.bindAllMethods(this, this);
    }


    /**
     * Returns a datasource reference to the given child branch of the current datasource.
     * @param {String} childName
     */
    child(childName) {
        return new FirebaseDataSource(this._dataReference.child(childName).toString());
    }

    /**
     * Returns the full URL to the path on the datasource.
     */
    path() {
        return this._dataReference.toString();
    }

    /**
     * Returns the name of the current branch in the path on the datasource.
     */
    key() {
        return this._dataReference.key();
    }

    /**
     * Writes newData to the path this dataSource was constructed with.
     * @param {Object} newData
     */
    set(newData) {
        return this._dataReference.set(newData);
    }

    /**
     * Removes the object and all underlying children that this dataSource points to.
     */
    remove() {
        return this._dataReference.remove();
    }

    /**
     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
     * the dataSource.
     * @param {Object} newData
     */
    push(newData) {
        return new FirebaseDataSource(this._dataReference.push(newData).toString());
    }

    /**
    * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
    * @param {Object} newData
    * @param {String|Number} priority
    */
    setWithPriority(newData, priority) {
        return this._dataReference.setWithPriority(newData, priority);
    }

    /**
     * Sets the priority (ordering) of an object on a given dataSource.
     * @param {String|Number} newPriority
     */
    setPriority(newPriority) {
        return this._dataReference.setPriority(newPriority);
    }

    /** Set the callback triggered when dataSource updates the data.
     * @param {Function} callback **/
    setValueChangedCallback(callback) {
        this._onValueCallback = callback;
        this._dataReference.on('value', this._onValueCallback);
    }

    /** Removes the callback set to trigger when dataSource updates the data. **/
    removeValueChangedCallback() {
        if(this._onValueCallback) {
            this._dataReference.off('value', this._onValueCallback);
            this._onValueCallback = null;
        }
    }

    /** Set the callback triggered when dataSource adds a data element.
     * @param {Function} callback **/
    setChildAddedCallback(callback) {
        this._onAddCallback = callback;
        this._dataReference.on('child_added', (newChildSnapshot, prevChildName) => {
            this._onAddCallback(newChildSnapshot);
        });
    }

    /** Removes the callback set to trigger when dataSource adds a data element. **/
    removeChildAddedCallback() {
        if(this._onAddCallback) {
            this._dataReference.off('child_added', this._onAddCallback);
            this._onAddCallback = null;
        }
    }

    /** Set the callback triggered when dataSource changes a data element.
     * @param {Function} callback **/
    setChildChangedCallback(callback) {
        this._onChangeCallback = callback;
        this._dataReference.on('child_changed', (newChildSnapshot, prevChildName) => {
            this._onChangeCallback(newChildSnapshot);
        });
    }

    /** Removes the callback set to trigger when dataSource changes a data element. **/
    removeChildChangedCallback() {
        if(this._onChangeCallback) {
            this._dataReference.off('child_added', this._onChangeCallback);
            this._onChangeCallback = null;
        }
    }

    /** Set the callback triggered when dataSource moves a data element.
     * @param {Function} callback **/
    setChildMovedCallback(callback) {
        this._onMoveCallback = callback;
        this._dataReference.on('child_moved', (newChildSnapshot, prevChildName) => {
            this._onMoveCallback(newChildSnapshot);
        });
    }

    /** Removes the callback set to trigger when dataSource moves a data element. **/
    removeChildMovedCallback() {
        if(this._onMoveCallback) {
            this._dataReference.off('child_moved', this._onMoveCallback);
            this._onMoveCallback = null;
        }
    }

    /** Set the callback triggered when dataSource removes a data element.
     * @param {Function} callback **/
    setChildRemovedCallback(callback) {
        this._onRemoveCallback = callback;
        this._dataReference.on('child_removed', this._onRemoveCallback);
    }

    /** Removes the callback set to trigger when dataSource removes a data element. **/
    removeChildRemovedCallback() {
        if(this._onRemoveCallback) {
            this._dataReference.off('child_removed', this._onRemoveCallback);
            this._onRemoveCallback = null;
        }
    }
}

annotate(FirebaseDataSource, new Provide(DataSource));